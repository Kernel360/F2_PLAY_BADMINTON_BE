name: Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set environment values
      run: |
        cd ./badminton-api/src/main/resources
        touch ./.env
        echo "${{ secrets.ENV }}" > ./.env
      shell: bash
      
    - name: Set Gradle Wrapper Permissions
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew bootJar  # bootJar로 변경

    - name: Build and push Docker image
      run: |
        # Log in to Docker Hub
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
        
        # Build the Docker image with the 'latest' tag
        docker build -t ${{ secrets.DOCKERHUB_CONTAINERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest .
        
        # Push the Docker image to Docker Hub
        docker push ${{ secrets.DOCKERHUB_CONTAINERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest
        
    - name: Clean up dangling Docker images locally
      run: |
        # Clean up any dangling images after the build
        docker image prune -f

    - name: Deploy to EC2 Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PUBLIC_DNS }} # EC2의 퍼블릭 DNS
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}  # GitHub Secrets에 저장된 SSH 비밀 키
        port: 22
        script: |
          # Docker Hub에 로그인
          echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    
          # 최신 Docker 이미지 Pull
          docker pull ${{ secrets.DOCKERHUB_CONTAINERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest
    
          # 기존 컨테이너가 있을 경우 중지 및 제거
          docker ps -q -f name=speech2 | xargs -r docker stop
          docker ps -a -q -f name=speech2 | xargs -r docker rm
    
          # 환경 변수를 사용하여 새로운 컨테이너 실행
          docker run -d \
            -p 8080:8080 \
            --name speech2 \
            ${{ secrets.DOCKERHUB_CONTAINERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:latest
    
          # 서버에서 오래된 Docker 이미지 정리
          docker image prune -f
